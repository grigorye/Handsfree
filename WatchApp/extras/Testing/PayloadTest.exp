set sdk_root "$env(sdk_root)"
set device "$env(device)"
set prg "$env(prg)"

set expected_keys {recents phones}
set matched_keys {}

proc is_expected_key {key} {
    global expected_keys
    return [expr {[lsearch $expected_keys $key] != -1}]
}

proc is_matched_key {key} {
    global matched_keys
    return [expr {[lsearch $matched_keys $key] != -1}]
}

proc add_matched_key {key} {
    global matched_keys
    if {![is_matched_key $key]} {
        lappend matched_keys $key
    }
}

proc reset_matched_keys {} {
    global matched_keys
    set matched_keys {}
}

proc missing_keys {} {
    global matched_keys expected_keys
    set missing_keys {}
    foreach key $expected_keys {
        if {[lsearch $matched_keys $key] == -1} {
            lappend missing_keys $key
        }
    }
    return $missing_keys
}

proc joined_by_comma {list} {
    set result ""
    foreach item $list {
        append result "$item, "
    }
    return [string range $result 0 end-2]
}

set attempts 0
while {1} {
    set timeout 60
    # Print time
    puts [clock format [clock seconds] -format "%Y-%m-%d %H:%M:%S"]
    spawn sh -c "killall -q simulator || true"
    spawn "adb" "forward" "tcp:7381" "tcp:7381"
    spawn "$sdk_root/bin/connectiq"
    sleep 2
    spawn "/opt/homebrew/bin/sendkeys" "--application-name" "com.garmin.connectiq.simulator" "--characters" "<c:d:command><p:1><c:f1:command>"
    sleep 2
    spawn monkeydo "$prg" $device
    expect {
        "Unable to connect to simulator." {
            if {$attempts > 3} {
                set attempts 0
                spawn sh -c "killall -q simulator || true"
            } else {
                incr attempts
                sleep 2
            }
            puts ""
            continue
        }
        timeout {
            spawn sh -c "killall -q simulator || true"
            puts ""
            continue
        }
        "Error: Out Of Memory Error\r\n" {
            # Wait for the stack trace to be printed (followed by empty line)
            expect "\r\n\r\n"
            puts ">>> Out of memory error"
            exit 1
        }
        -re "^Background:.* app.onAppInstall" {
            puts ">>> Accounting app.onAppInstall"
            puts ">>> Keys to find: [joined_by_comma $expected_keys]"
            set attempts 0
            set timeout 60

            reset_matched_keys

            while {1} {
                expect {
                    "Error: Out Of Memory Error\r\n" {
                        # Wait for the stack trace to be printed (followed by empty line)
                        expect "\r\n\r\n"
                        puts ">>> Out of memory error"
                        exit 1
                    }
                    # Match "app.storeValue: phones.v2" and "app.storeValue: recents.v1", saving the key before the dot
                    -re "\n(Background: )?(..:..:.. )?app.storeValue: (\[a-z\]+)\\.v\[0-9\]+ \\(\[0-9\]+\\)\r" {
                        # Save the match in the key variable
                        set key $expect_out(3,string)
                        # Print the key
                        # If the key is in the required strings and not already matched, add it to the matched strings
                        if {[is_expected_key $key]} {
                            # If the key is not already matched, add it to the matched keys                            
                            if {![is_matched_key $key]} {
                                puts ">>> Accounting key: $key"
                                add_matched_key $key
                                if {[llength [missing_keys]] == 0} {
                                    puts ">>> All keys found"
                                    exit 0
                                }
                                puts ">>> Keys remaining to find: [joined_by_comma [missing_keys]]"
                            } else {
                                puts ">>> Ignoring duplicate key: $key"
                            }
                        } else {
                            puts ">>> Ignoring unknown key: $key"
                        }
                        continue
                    }
                    timeout {
                        puts ">>> Timed out while looking for keys: [joined_by_comma [missing_keys]]"
                        exit 1
                    }
                }
            }
            continue
        }
    }
}
