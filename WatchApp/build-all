#! /usr/bin/env -S stdbuf -oL -eL /bin/bash
# shellcheck shell=bash

set -euo pipefail
set -x

dist="$1" # prod or beta
shift
type="$1" # app or widget
shift
build_for_side_loading="${1:-false}" # true or false

if $build_for_side_loading; then
    shift
    dev_devices=("$@")
else
    dev_devices=()
fi

wd=$(dirname "$0")

src_root="$wd"
product_name="Handsfree"

filter_redundant_monkeyc_warnings() {
    tee |
        grep --line-buffered -v "^WARNING: .*: The launcher icon (128x128) isn't compatible with the specified launcher icon size of the device .*\. The image will be scaled to the target size." |
        grep --line-buffered -v "^WARNING: .*: Glance applications are not supported for app type '.*' on device .*\. The (:glance) annotation will be ignored.$" |
        grep --line-buffered -v "^WARNING: .*: .* resource '.*' specifies the 'glance' resource scope, but app type '.*' does not support glances on device '.*'.$" |
        grep --line-buffered -v "^WARNING: instinct[23e].*: Detected (:glance) annotation but function getGlanceView() not defined in AppBase." |
        grep --line-buffered -v "^.* OUT OF .* DEVICES BUILT$" |
        tee ||
        true
}

# shellcheck disable=SC2312
exec > >(filter_redundant_monkeyc_warnings) 2>&1

# shellcheck source-path=SCRIPTDIR
. "$src_root/sdk-env.sh"

jungle="$src_root/jungle"
manifest="$src_root/manifest-$type.xml"
shared_jungle="$src_root/shared.jungle"

if [[ ${#dev_devices[@]} -eq 0 ]]; then
    build_all_devices=true
else
    build_all_devices=false
fi

if $build_all_devices; then
    # shellcheck disable=SC2207
    dev_devices=($(cat "$manifest" | sed 's/iq://g' | xq -r '.manifest.application.products.product.[]|.["@id"]'))
fi

build_dir="$src_root/build"
release_resources="$build_dir/resources"
mkdir -p "$release_resources"
release_source="$build_dir/source"
mkdir -p "$release_source"

unmatchable='736fd2e'
source_hash=$(git -C "$src_root" describe --match "$unmatchable" --dirty --always | sed 's/dirty/?/g')
source_commits=$(git rev-list --count HEAD)
source_version="$source_commits-$source_hash"

case "$type" in
app)
    beta_app_id="a3d8da80-e013-41f9-aca4-f66bb38fad3f"
    prod_app_id="76526066-d191-46f4-9cfb-bbf9ed955b23"
    ;;
widget)
    beta_app_id="cdc225d9-bc88-4d9e-a8a6-ce7dffdd0714"
    prod_app_id="4241a52e-81db-4356-ac43-c8dfeb7d0be0"
    ;;
*)
    echo "Unknown type: $type"
    exit 1
    ;;
esac

sed -e "s/__SOURCE_VERSION__/$source_version/g" "$src_root"/local/resources/sourceVersion.xml-template >"$release_resources"/sourceVersion.xml
sed -e "s/__SOURCE_VERSION__/$source_version/g" "$src_root"/local/source/SourceVersion.mc-template >"$release_source"/SourceVersion.mc
sed -e "s/$beta_app_id/$prod_app_id/g" "$manifest" >"$release_source"/manifest.xml
diff "$manifest" "$release_source"/manifest.xml && false # Check that sed did something.

iq_dir="$build_dir/iq"
prg_dir="$build_dir/prg"

### .iq

default_build_iq() {
    java -Xms1g -Dfile.encoding=UTF-8 -Dapple.awt.UIElement=true \
        -jar "$sdk_root"/bin/monkeybrains.jar \
        -o "$iq" \
        -f "$jungles" \
        -y "$developer_key" \
        --package-app \
        --warn
}

optimized_build_iq() {
    node optimize.mjs "$iq" "$jungles" "$developer_key"
}

### .prg

build_iq() {
    if true; then
        default_build_iq
    else
        optimized_build_iq
    fi
}

default_build_prg() {
    java -Xms1g -Dfile.encoding=UTF-8 -Dapple.awt.UIElement=true \
        -jar "$sdk_root"/bin/monkeybrains.jar \
        -o "$prg" \
        -f "$jungles" \
        -y "$developer_key" \
        -d "$device" \
        --build-stats 0 \
        -r \
        --warn
}

optimized_build_iq() {
    node optimize.mjs "$iq" "$jungles" "$developer_key"
}

build_prg() {
    if true; then
        default_build_prg
    else
        optimized_build_prg
    fi
}
###

if ! $build_for_side_loading; then
    iq_prefix="$iq_dir/$product_name-$dist-$type"
    iq="$iq_prefix.iq"
    jungles="$jungle/type/$type.jungle;$jungle/dist/$dist.jungle;$jungle/versioning/release.jungle;$shared_jungle"
    build_iq
else
    for device in "${dev_devices[@]}"; do
        prg_prefix="$prg_dir/$device/$product_name-beta-$type-$device"
        prg="$prg_prefix.prg"
        txt="$prg_prefix.TXT"
        jungles="$jungle/type/$type.jungle;$jungle/dist/beta.jungle;$jungle/versioning/release.jungle;$shared_jungle"
        build_prg
        touch "$txt"
    done
fi

if $build_for_side_loading && $build_all_devices; then
    (cd "$prg_dir" && tree -H . --noreport --dirsfirst -T "Version $source_version" --charset utf-8 -I "index.html" -o "index.html" -P "*.prg|*.TXT" --prune --houtro=/dev/null)
fi

echo "$source_version" >"$build_dir"/version.txt
